#pragma once

#include <iostream>
#include <iomanip>
#include <math.h>
class Classification
{
private:
    //用于分类的数据
    //三维向量分类
    double m_x31[20] = { 6,12,18,11,9,8,7,1,15,7,10,11,11,15,4,0,18,12,15,17 };
    double m_y31[20] = { 8,13,15,3,2,15,9,11,18,2,18,17,6,6,13,12,5,4,4,15 };
    double m_z31[20] = { 5,1,8,18,6,3,14,2,2,18,4,3,4,13,16,18,7,16,5,15 };

    //第二组
    double m_x32[20] = { 6,17,2,5,4,13,16,17,7,15,3,1,2,3,15,5,18,17,0,14 };
    double m_y32[20] = { 10,13,15,3,6,17,15,16,19,9,11,19,12,6,8,11,7,7,14,2 };
    double m_z32[20] = { 0,16,10,18,10,11,11,14,3,7,0,7,18,0,8,10,4,7,15,17 };

    //第三组
    double m_x33[20] = { 7,12,14,8,16,14,15,11,8,17,4,17,19,9,7,10,12,15,11,2 };
    double m_y33[20] = { 14,14,19,4,4,16,13,14,5,3,15,0,4,4,2,3,16,18,15,6 };
    double m_z33[20] = { 17,8,7,13,12,2,16,6,5,5,16,3,18,7,9,3,9,2,19,19 };

    //第四组
    double m_x34[20] = { 13,18,18,16,2,7,19,8,18,19,12,4,18,4,8,11,2,0,13,4 };
    double m_y34[20] = { 8,0,13,7,15,19,11,0,5,12,18,8,7,19,16,8,3,10,9,17 };
    double m_z34[20] = { 10,0,7,7,17,5,2,1,2,2,15,1,6,6,7,1,0,10,13,14 };

    //第五组
    double m_x35[20] = { 0,10,17,10,3,11,5,13,2,3,16,7,1,16,1,4,9,17,4,5 };
    double m_y35[20] = { 13,0,17,9,8,4,10,11,7,0,14,0,15,3,16,15,4,10,11,2 };
    double m_z35[20] = { 11,17,17,15,9,0,11,0,12,9,14,19,4,10,18,8,2,5,14,11 };

    //二维向量
    //第一组
    double m_x21[20] = { 14,3,15,2,5,8,19,18,4,2,4,11,3,16,1,4,9,17,4,15 };
    double m_y21[20] = { 17,19,1,11,13,7,17,12,0,0,17,18,18,3,16,15,4,10,11,2 };

    //第二组
    double m_x22[20] = { 13,12,5,16,13,6,6,15,14,19,2,19,17,19,8,5,0,17,12,9 };
    double m_y22[20] = { 2,14,10,5,19,8,3,1,19,11,0,2,19,8,8,19,17,18,8,18 };

    //第三组
    double m_x23[20] = { 10,2,18,16,9,14,5,2,13,14,5,9,7,4,8,9,2,7,11,14 };
    double m_y23[20] = { 4,13,1,17,17,19,9,10,16,2,1,4,13,2,3,5,13,7,15,17 };

    //第四组
    double m_x24[20] = { 1,10,4,10,6,19,6,8,11,5,7,15,5,9,0,1,9,4,9 };
    double m_y24[20] = { 12,0,2,12,1,8,0,1,2,18,18,5,18,3,8,13,6,18,18,16 };

    //第五组
    double m_x25[20] = { 18,9,6,5,1,13,0,0,2,12,16,12,1,7,15,12,9,16,3,13 };
    double m_y25[20] = { 10,13,3,4,0,11,11,5,2,7,19,14,6,14,13,15,12,11,18,1 };
   
    //测试用数据
    double m_x5[5] = { 0,3,3,1,0 };
    double m_y5[5] = { 3,0,1,3,2 };
    
    //选择维度
    int Dimensionality = 0;
    //选择组数
    int dataGroup = 0;
    //数据个数
    int dataAmount;
    //距离个数
    int distanceAmount;
    //用于链接数据
    double *m_x, *m_y, *m_z;

    //聚类后用于保存两类 (A、B与点A、点B无直接关系)
    int classA[19], classB[19];
    //用于保存所有点最大最小距离
    double Maxdistance, Mindistance;
    //用于保存任意两点之间的距离
    double distance[190];
    //用于保存每类包含的点的个数
    int classAcountNum, classBcountNum;

public:

    Classification();

    //使用维度和数据组进行初始化操作
    Classification(int d, int group);
    //格式化打印数据点
    void printData();
    //这里的i,j是指点的顺序，从0~19
    double getDistance(int i,int j);
    //计算点与点之间的距离并保存在distance[]中
    void computeDistance();
    //最大距离聚类法
    void MaxDistanceMethod();
    //最小距离聚类法
    void MinDistanceMethod();
    //均值距离聚类法
    void MeanDistanceMethod();
    //格式化输出数据
    void printClassResult();

    ~Classification();
};

